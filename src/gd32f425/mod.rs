#![doc = "Peripheral access API for GD32F425 microcontrollers (generated using svd2rust v0.36.1 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDGT();
    fn RTC_T_tamper();
    fn RTC_WKUP();
    fn FMC();
    fn RCU_CTC();
    fn EXTI_Line0();
    fn EXTI_Line1();
    fn EXTI_Line2();
    fn EXTI_Line3();
    fn EXTI_Line4();
    fn DMA0_Channel0();
    fn DMA0_Channel1();
    fn DMA0_Channel2();
    fn DMA0_Channel3();
    fn DMA0_Channel4();
    fn DMA0_Channel5();
    fn DMA0_Channel6();
    fn ADC();
    fn CAN0_TX();
    fn CAN0_RX0();
    fn CAN0_RX1();
    fn CAN0_EWMC();
    fn EXTI_line9_5();
    fn TIMER0_BRK_TIMER8();
    fn TIMER0_UP_TIMER9();
    fn TIMER0_TRG_CMT_TIMER10();
    fn TIMER0_CC();
    fn TIMER1();
    fn TIMER2();
    fn TIMER3();
    fn I2C0_EV();
    fn I2C0_ER();
    fn I2C1_EV();
    fn I2C1_ER();
    fn SPI0();
    fn SPI1();
    fn USART0();
    fn USART1();
    fn USART2();
    fn EXTI_line15_10();
    fn RTC_Alarm();
    fn OTG_FS_WKUP();
    fn TIMER7_BRK_TIMER11();
    fn TIMER7_UP_TIMER12();
    fn TIMER7_TRG_CMT_TIMER13();
    fn TIMER7_CC();
    fn DMA0_Channel7();
    fn EXMC();
    fn SDIO();
    fn TIMER4();
    fn SPI2();
    fn UART3();
    fn UART4();
    fn TIMER5_DAC();
    fn TIMER6();
    fn DMA1_Channel0();
    fn DMA1_Channel1();
    fn DMA1_Channel2();
    fn DMA1_Channel3();
    fn DMA1_Channel4();
    fn ENET();
    fn ENET_WKUP();
    fn CAN1_TX();
    fn CAN1_RX0();
    fn CAN1_RX1();
    fn CAN1_EWMC();
    fn OTG_FS();
    fn DMA1_Channel5();
    fn DMA1_Channel6();
    fn DMA1_Channel7();
    fn USART5();
    fn I2C2_EV();
    fn I2C2_ER();
    fn USBHS_EP1_Out();
    fn USBHS_EP1_In();
    fn USBHS_WKUP();
    fn USBHS();
    fn DCI();
    fn TRNG();
    fn UART6();
    fn UART7();
    fn SPI3();
    fn SPI4();
    fn SPI5();
    fn TLI();
    fn TLI_ER();
    fn IPA();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 91] = [
    Vector { _handler: WWDGT },
    Vector { _reserved: 0 },
    Vector {
        _handler: RTC_T_tamper,
    },
    Vector { _handler: RTC_WKUP },
    Vector { _handler: FMC },
    Vector { _handler: RCU_CTC },
    Vector {
        _handler: EXTI_Line0,
    },
    Vector {
        _handler: EXTI_Line1,
    },
    Vector {
        _handler: EXTI_Line2,
    },
    Vector {
        _handler: EXTI_Line3,
    },
    Vector {
        _handler: EXTI_Line4,
    },
    Vector {
        _handler: DMA0_Channel0,
    },
    Vector {
        _handler: DMA0_Channel1,
    },
    Vector {
        _handler: DMA0_Channel2,
    },
    Vector {
        _handler: DMA0_Channel3,
    },
    Vector {
        _handler: DMA0_Channel4,
    },
    Vector {
        _handler: DMA0_Channel5,
    },
    Vector {
        _handler: DMA0_Channel6,
    },
    Vector { _handler: ADC },
    Vector { _handler: CAN0_TX },
    Vector { _handler: CAN0_RX0 },
    Vector { _handler: CAN0_RX1 },
    Vector {
        _handler: CAN0_EWMC,
    },
    Vector {
        _handler: EXTI_line9_5,
    },
    Vector {
        _handler: TIMER0_BRK_TIMER8,
    },
    Vector {
        _handler: TIMER0_UP_TIMER9,
    },
    Vector {
        _handler: TIMER0_TRG_CMT_TIMER10,
    },
    Vector {
        _handler: TIMER0_CC,
    },
    Vector { _handler: TIMER1 },
    Vector { _handler: TIMER2 },
    Vector { _handler: TIMER3 },
    Vector { _handler: I2C0_EV },
    Vector { _handler: I2C0_ER },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: SPI0 },
    Vector { _handler: SPI1 },
    Vector { _handler: USART0 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector {
        _handler: EXTI_line15_10,
    },
    Vector {
        _handler: RTC_Alarm,
    },
    Vector {
        _handler: OTG_FS_WKUP,
    },
    Vector {
        _handler: TIMER7_BRK_TIMER11,
    },
    Vector {
        _handler: TIMER7_UP_TIMER12,
    },
    Vector {
        _handler: TIMER7_TRG_CMT_TIMER13,
    },
    Vector {
        _handler: TIMER7_CC,
    },
    Vector {
        _handler: DMA0_Channel7,
    },
    Vector { _handler: EXMC },
    Vector { _handler: SDIO },
    Vector { _handler: TIMER4 },
    Vector { _handler: SPI2 },
    Vector { _handler: UART3 },
    Vector { _handler: UART4 },
    Vector {
        _handler: TIMER5_DAC,
    },
    Vector { _handler: TIMER6 },
    Vector {
        _handler: DMA1_Channel0,
    },
    Vector {
        _handler: DMA1_Channel1,
    },
    Vector {
        _handler: DMA1_Channel2,
    },
    Vector {
        _handler: DMA1_Channel3,
    },
    Vector {
        _handler: DMA1_Channel4,
    },
    Vector { _handler: ENET },
    Vector {
        _handler: ENET_WKUP,
    },
    Vector { _handler: CAN1_TX },
    Vector { _handler: CAN1_RX0 },
    Vector { _handler: CAN1_RX1 },
    Vector {
        _handler: CAN1_EWMC,
    },
    Vector { _handler: OTG_FS },
    Vector {
        _handler: DMA1_Channel5,
    },
    Vector {
        _handler: DMA1_Channel6,
    },
    Vector {
        _handler: DMA1_Channel7,
    },
    Vector { _handler: USART5 },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector {
        _handler: USBHS_EP1_Out,
    },
    Vector {
        _handler: USBHS_EP1_In,
    },
    Vector {
        _handler: USBHS_WKUP,
    },
    Vector { _handler: USBHS },
    Vector { _handler: DCI },
    Vector { _reserved: 0 },
    Vector { _handler: TRNG },
    Vector { _reserved: 0 },
    Vector { _handler: UART6 },
    Vector { _handler: UART7 },
    Vector { _handler: SPI3 },
    Vector { _handler: SPI4 },
    Vector { _handler: SPI5 },
    Vector { _reserved: 0 },
    Vector { _handler: TLI },
    Vector { _handler: TLI_ER },
    Vector { _handler: IPA },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - WWDGT"]
    WWDGT = 0,
    #[doc = "2 - RTC_T_tamper"]
    RTC_T_tamper = 2,
    #[doc = "3 - RTC_WKUP"]
    RTC_WKUP = 3,
    #[doc = "4 - FMC"]
    FMC = 4,
    #[doc = "5 - RCU_CTC"]
    RCU_CTC = 5,
    #[doc = "6 - EXTI_Line0"]
    EXTI_Line0 = 6,
    #[doc = "7 - EXTI_Line1"]
    EXTI_Line1 = 7,
    #[doc = "8 - EXTI_Line2"]
    EXTI_Line2 = 8,
    #[doc = "9 - EXTI_Line3"]
    EXTI_Line3 = 9,
    #[doc = "10 - EXTI_Line4"]
    EXTI_Line4 = 10,
    #[doc = "11 - DMA0_Channel0"]
    DMA0_Channel0 = 11,
    #[doc = "12 - DMA0_Channel1"]
    DMA0_Channel1 = 12,
    #[doc = "13 - DMA0_Channel2"]
    DMA0_Channel2 = 13,
    #[doc = "14 - DMA0_Channel3"]
    DMA0_Channel3 = 14,
    #[doc = "15 - DMA0_Channel4"]
    DMA0_Channel4 = 15,
    #[doc = "16 - DMA0_Channel5"]
    DMA0_Channel5 = 16,
    #[doc = "17 - DMA0_Channel6"]
    DMA0_Channel6 = 17,
    #[doc = "18 - ADC"]
    ADC = 18,
    #[doc = "19 - CAN0_TX"]
    CAN0_TX = 19,
    #[doc = "20 - CAN0_RX0"]
    CAN0_RX0 = 20,
    #[doc = "21 - CAN0_RX1"]
    CAN0_RX1 = 21,
    #[doc = "22 - CAN0_EWMC"]
    CAN0_EWMC = 22,
    #[doc = "23 - EXTI_line9_5"]
    EXTI_line9_5 = 23,
    #[doc = "24 - TIMER0_BRK_TIMER8"]
    TIMER0_BRK_TIMER8 = 24,
    #[doc = "25 - TIMER0_UP_TIMER9"]
    TIMER0_UP_TIMER9 = 25,
    #[doc = "26 - TIMER0_TRG_CMT_TIMER10"]
    TIMER0_TRG_CMT_TIMER10 = 26,
    #[doc = "27 - TIMER0_CC"]
    TIMER0_CC = 27,
    #[doc = "28 - TIMER1"]
    TIMER1 = 28,
    #[doc = "29 - TIMER2"]
    TIMER2 = 29,
    #[doc = "30 - TIMER3"]
    TIMER3 = 30,
    #[doc = "31 - I2C0_EV"]
    I2C0_EV = 31,
    #[doc = "32 - I2C0_ER"]
    I2C0_ER = 32,
    #[doc = "33 - I2C1_EV"]
    I2C1_EV = 33,
    #[doc = "34 - I2C1_ER"]
    I2C1_ER = 34,
    #[doc = "35 - SPI0"]
    SPI0 = 35,
    #[doc = "36 - SPI1"]
    SPI1 = 36,
    #[doc = "37 - USART0"]
    USART0 = 37,
    #[doc = "38 - USART1"]
    USART1 = 38,
    #[doc = "39 - USART2"]
    USART2 = 39,
    #[doc = "40 - EXTI_line15_10"]
    EXTI_line15_10 = 40,
    #[doc = "41 - RTC_Alarm"]
    RTC_Alarm = 41,
    #[doc = "42 - OTG_FS_WKUP"]
    OTG_FS_WKUP = 42,
    #[doc = "43 - TIMER7_BRK_TIMER11"]
    TIMER7_BRK_TIMER11 = 43,
    #[doc = "44 - TIMER7_UP_TIMER12"]
    TIMER7_UP_TIMER12 = 44,
    #[doc = "45 - TIMER7_TRG_CMT_TIMER13"]
    TIMER7_TRG_CMT_TIMER13 = 45,
    #[doc = "46 - TIMER7_CC"]
    TIMER7_CC = 46,
    #[doc = "47 - DMA0_Channel7"]
    DMA0_Channel7 = 47,
    #[doc = "48 - EXMC"]
    EXMC = 48,
    #[doc = "49 - SDIO"]
    SDIO = 49,
    #[doc = "50 - TIMER4"]
    TIMER4 = 50,
    #[doc = "51 - SPI2"]
    SPI2 = 51,
    #[doc = "52 - UART3"]
    UART3 = 52,
    #[doc = "53 - UART4"]
    UART4 = 53,
    #[doc = "54 - TIMER5_DAC"]
    TIMER5_DAC = 54,
    #[doc = "55 - TIMER6"]
    TIMER6 = 55,
    #[doc = "56 - DMA1_Channel0"]
    DMA1_Channel0 = 56,
    #[doc = "57 - DMA1_Channel1"]
    DMA1_Channel1 = 57,
    #[doc = "58 - DMA1_Channel2"]
    DMA1_Channel2 = 58,
    #[doc = "59 - DMA1_Channel3"]
    DMA1_Channel3 = 59,
    #[doc = "60 - DMA1_Channel4"]
    DMA1_Channel4 = 60,
    #[doc = "61 - ENET"]
    ENET = 61,
    #[doc = "62 - ENET_WKUP"]
    ENET_WKUP = 62,
    #[doc = "63 - CAN1_TX"]
    CAN1_TX = 63,
    #[doc = "64 - CAN1_RX0"]
    CAN1_RX0 = 64,
    #[doc = "65 - CAN1_RX1"]
    CAN1_RX1 = 65,
    #[doc = "66 - CAN1_EWMC"]
    CAN1_EWMC = 66,
    #[doc = "67 - OTG_FS"]
    OTG_FS = 67,
    #[doc = "68 - DMA1_Channel5"]
    DMA1_Channel5 = 68,
    #[doc = "69 - DMA1_Channel6"]
    DMA1_Channel6 = 69,
    #[doc = "70 - DMA1_Channel7"]
    DMA1_Channel7 = 70,
    #[doc = "71 - USART5"]
    USART5 = 71,
    #[doc = "72 - I2C2_EV"]
    I2C2_EV = 72,
    #[doc = "73 - I2C2_ER"]
    I2C2_ER = 73,
    #[doc = "74 - USBHS_EP1_Out"]
    USBHS_EP1_Out = 74,
    #[doc = "75 - USBHS_EP1_In"]
    USBHS_EP1_In = 75,
    #[doc = "76 - USBHS_WKUP"]
    USBHS_WKUP = 76,
    #[doc = "77 - USBHS"]
    USBHS = 77,
    #[doc = "78 - DCI"]
    DCI = 78,
    #[doc = "80 - TRNG"]
    TRNG = 80,
    #[doc = "82 - UART6"]
    UART6 = 82,
    #[doc = "83 - UART7"]
    UART7 = 83,
    #[doc = "84 - SPI3"]
    SPI3 = 84,
    #[doc = "85 - SPI4"]
    SPI4 = 85,
    #[doc = "86 - SPI5"]
    SPI5 = 86,
    #[doc = "88 - TLI"]
    TLI = 88,
    #[doc = "89 - TLI_ER"]
    TLI_ER = 89,
    #[doc = "90 - IPA"]
    IPA = 90,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Analog to digital converter"]
pub type Adc0 = crate::Periph<adc0::RegisterBlock, 0x4001_2000>;
impl core::fmt::Debug for Adc0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc0").finish()
    }
}
#[doc = "Analog to digital converter"]
pub mod adc0;
#[doc = "Analog to digital converter"]
pub type Adc1 = crate::Periph<adc0::RegisterBlock, 0x4001_2100>;
impl core::fmt::Debug for Adc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc1").finish()
    }
}
#[doc = "Analog to digital converter"]
pub use self::adc0 as adc1;
#[doc = "Analog to digital converter"]
pub type Adc2 = crate::Periph<adc0::RegisterBlock, 0x4001_2200>;
impl core::fmt::Debug for Adc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc2").finish()
    }
}
#[doc = "Analog to digital converter"]
pub use self::adc0 as adc2;
#[doc = "common ADC register"]
pub type AdcCommon = crate::Periph<adc_common::RegisterBlock, 0x4001_2300>;
impl core::fmt::Debug for AdcCommon {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AdcCommon").finish()
    }
}
#[doc = "common ADC register"]
pub mod adc_common;
#[doc = "Controller area network"]
pub type Can0 = crate::Periph<can0::RegisterBlock, 0x4000_6400>;
impl core::fmt::Debug for Can0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can0").finish()
    }
}
#[doc = "Controller area network"]
pub mod can0;
#[doc = "Controller area network"]
pub type Can1 = crate::Periph<can0::RegisterBlock, 0x4000_6800>;
impl core::fmt::Debug for Can1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can1").finish()
    }
}
#[doc = "Controller area network"]
pub use self::can0 as can1;
#[doc = "cyclic redundancy check calculation unit"]
pub type Crc = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for Crc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crc").finish()
    }
}
#[doc = "cyclic redundancy check calculation unit"]
pub mod crc;
#[doc = "Clock trim controller"]
pub type Ctc = crate::Periph<ctc::RegisterBlock, 0x4000_6c00>;
impl core::fmt::Debug for Ctc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ctc").finish()
    }
}
#[doc = "Clock trim controller"]
pub mod ctc;
#[doc = "Digital-to-analog converter"]
pub type Dac = crate::Periph<dac::RegisterBlock, 0x4000_7400>;
impl core::fmt::Debug for Dac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac").finish()
    }
}
#[doc = "Digital-to-analog converter"]
pub mod dac;
#[doc = "Debug support"]
pub type Dbg = crate::Periph<dbg::RegisterBlock, 0xe004_2000>;
impl core::fmt::Debug for Dbg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dbg").finish()
    }
}
#[doc = "Debug support"]
pub mod dbg;
#[doc = "Digital Camera Interface"]
pub type Dci = crate::Periph<dci::RegisterBlock, 0x5005_0000>;
impl core::fmt::Debug for Dci {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dci").finish()
    }
}
#[doc = "Digital Camera Interface"]
pub mod dci;
#[doc = "DMA controller"]
pub type Dma0 = crate::Periph<dma0::RegisterBlock, 0x4002_6000>;
impl core::fmt::Debug for Dma0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma0").finish()
    }
}
#[doc = "DMA controller"]
pub mod dma0;
#[doc = "DMA controller"]
pub type Dma1 = crate::Periph<dma0::RegisterBlock, 0x4002_6400>;
impl core::fmt::Debug for Dma1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma1").finish()
    }
}
#[doc = "DMA controller"]
pub use self::dma0 as dma1;
#[doc = "Ethernet: DMA controller operation"]
pub type EnetDma = crate::Periph<enet_dma::RegisterBlock, 0x4002_9000>;
impl core::fmt::Debug for EnetDma {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EnetDma").finish()
    }
}
#[doc = "Ethernet: DMA controller operation"]
pub mod enet_dma;
#[doc = "MAC flow control threshold register"]
pub type EnetMacFcth = crate::Periph<enet_mac_fcth::RegisterBlock, 0x4002_9080>;
impl core::fmt::Debug for EnetMacFcth {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EnetMacFcth").finish()
    }
}
#[doc = "MAC flow control threshold register"]
pub mod enet_mac_fcth;
#[doc = "Ethernet: media access control"]
pub type EnetMac = crate::Periph<enet_mac::RegisterBlock, 0x4002_8000>;
impl core::fmt::Debug for EnetMac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EnetMac").finish()
    }
}
#[doc = "Ethernet: media access control"]
pub mod enet_mac;
#[doc = "Ethernet: MAC statistics counters"]
pub type EnetMsc = crate::Periph<enet_msc::RegisterBlock, 0x4002_8100>;
impl core::fmt::Debug for EnetMsc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EnetMsc").finish()
    }
}
#[doc = "Ethernet: MAC statistics counters"]
pub mod enet_msc;
#[doc = "Ethernet: Precision time protocol"]
pub type EnetPtp = crate::Periph<enet_ptp::RegisterBlock, 0x4002_8700>;
impl core::fmt::Debug for EnetPtp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EnetPtp").finish()
    }
}
#[doc = "Ethernet: Precision time protocol"]
pub mod enet_ptp;
#[doc = "External memory controller"]
pub type Exmc = crate::Periph<exmc::RegisterBlock, 0xa000_0000>;
impl core::fmt::Debug for Exmc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Exmc").finish()
    }
}
#[doc = "External memory controller"]
pub mod exmc;
#[doc = "External interrupt/event controller"]
pub type Exti = crate::Periph<exti::RegisterBlock, 0x4001_3c00>;
impl core::fmt::Debug for Exti {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Exti").finish()
    }
}
#[doc = "External interrupt/event controller"]
pub mod exti;
#[doc = "FMC"]
pub type Fmc = crate::Periph<fmc::RegisterBlock, 0x4002_3c00>;
impl core::fmt::Debug for Fmc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fmc").finish()
    }
}
#[doc = "FMC"]
pub mod fmc;
#[doc = "free watchdog timer"]
pub type Fwdgt = crate::Periph<fwdgt::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for Fwdgt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fwdgt").finish()
    }
}
#[doc = "free watchdog timer"]
pub mod fwdgt;
#[doc = "General-purpose I/Os"]
pub type Gpioa = crate::Periph<gpioa::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for Gpioa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioa").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioa;
#[doc = "General-purpose I/Os"]
pub type Gpiob = crate::Periph<gpiob::RegisterBlock, 0x4002_0400>;
impl core::fmt::Debug for Gpiob {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiob").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpiob;
#[doc = "General-purpose I/Os"]
pub type Gpioc = crate::Periph<gpioc::RegisterBlock, 0x4002_0800>;
impl core::fmt::Debug for Gpioc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioc").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioc;
#[doc = "General-purpose I/Os"]
pub type Gpiod = crate::Periph<gpioc::RegisterBlock, 0x4002_0c00>;
impl core::fmt::Debug for Gpiod {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiod").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpiod;
#[doc = "General-purpose I/Os"]
pub type Gpioe = crate::Periph<gpioc::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for Gpioe {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioe").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpioe;
#[doc = "General-purpose I/Os"]
pub type Gpiof = crate::Periph<gpioc::RegisterBlock, 0x4002_1400>;
impl core::fmt::Debug for Gpiof {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiof").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpiof;
#[doc = "General-purpose I/Os"]
pub type Gpiog = crate::Periph<gpioc::RegisterBlock, 0x4002_1800>;
impl core::fmt::Debug for Gpiog {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiog").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpiog;
#[doc = "General-purpose I/Os"]
pub type Gpioh = crate::Periph<gpioc::RegisterBlock, 0x4002_1c00>;
impl core::fmt::Debug for Gpioh {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioh").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpioh;
#[doc = "General-purpose I/Os"]
pub type Gpioi = crate::Periph<gpioc::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for Gpioi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioi").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpioi;
#[doc = "Inter integrated circuit"]
pub type I2c0 = crate::Periph<i2c0::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2c0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c0").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub mod i2c0;
#[doc = "Inter integrated circuit"]
pub type I2c1 = crate::Periph<i2c0::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub use self::i2c0 as i2c1;
#[doc = "Inter integrated circuit"]
pub type I2c2 = crate::Periph<i2c0::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for I2c2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c2").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub use self::i2c0 as i2c2;
#[doc = "Image processing accelerator"]
pub type Ipa = crate::Periph<ipa::RegisterBlock, 0x4002_b000>;
impl core::fmt::Debug for Ipa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ipa").finish()
    }
}
#[doc = "Image processing accelerator"]
pub mod ipa;
#[doc = "Programmable current reference"]
pub type Iref = crate::Periph<iref::RegisterBlock, 0x4000_c400>;
impl core::fmt::Debug for Iref {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iref").finish()
    }
}
#[doc = "Programmable current reference"]
pub mod iref;
#[doc = "Power management unit"]
pub type Pmu = crate::Periph<pmu::RegisterBlock, 0x4000_7000>;
impl core::fmt::Debug for Pmu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pmu").finish()
    }
}
#[doc = "Power management unit"]
pub mod pmu;
#[doc = "Reset and clock unit"]
pub type Rcu = crate::Periph<rcu::RegisterBlock, 0x4002_3800>;
impl core::fmt::Debug for Rcu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rcu").finish()
    }
}
#[doc = "Reset and clock unit"]
pub mod rcu;
#[doc = "Real-time clock"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x4000_2800>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Real-time clock"]
pub mod rtc;
#[doc = "Secure digital input/output interface"]
pub type Sdio = crate::Periph<sdio::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for Sdio {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdio").finish()
    }
}
#[doc = "Secure digital input/output interface"]
pub mod sdio;
#[doc = "Serial peripheral interface"]
pub type Spi0 = crate::Periph<spi0::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for Spi0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi0").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub mod spi0;
#[doc = "Serial peripheral interface"]
pub type Spi1 = crate::Periph<spi0::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi0 as spi1;
#[doc = "Serial peripheral interface"]
pub type Spi2 = crate::Periph<spi0::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for Spi2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi2").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi0 as spi2;
#[doc = "Serial peripheral interface"]
pub type Spi3 = crate::Periph<spi0::RegisterBlock, 0x4001_3400>;
impl core::fmt::Debug for Spi3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi3").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi0 as spi3;
#[doc = "Serial peripheral interface"]
pub type Spi4 = crate::Periph<spi0::RegisterBlock, 0x4001_5000>;
impl core::fmt::Debug for Spi4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi4").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi0 as spi4;
#[doc = "Serial peripheral interface"]
pub type Spi5 = crate::Periph<spi5::RegisterBlock, 0x4001_5400>;
impl core::fmt::Debug for Spi5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi5").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub mod spi5;
#[doc = "Serial peripheral interface"]
pub type I2s1Add = crate::Periph<spi0::RegisterBlock, 0x4000_3400>;
impl core::fmt::Debug for I2s1Add {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2s1Add").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi0 as i2s1_add;
#[doc = "Serial peripheral interface"]
pub type I2s2Add = crate::Periph<spi0::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for I2s2Add {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2s2Add").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi0 as i2s2_add;
#[doc = "System configuration controller"]
pub type Syscfg = crate::Periph<syscfg::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for Syscfg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Syscfg").finish()
    }
}
#[doc = "System configuration controller"]
pub mod syscfg;
#[doc = "Advanced-timers"]
pub type Timer0 = crate::Periph<timer0::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for Timer0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer0").finish()
    }
}
#[doc = "Advanced-timers"]
pub mod timer0;
#[doc = "General-purpose-timers"]
pub type Timer1 = crate::Periph<timer1::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Timer1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer1").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod timer1;
#[doc = "General-purpose-timers"]
pub type Timer2 = crate::Periph<timer1::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for Timer2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer2").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::timer1 as timer2;
#[doc = "General-purpose-timers"]
pub type Timer3 = crate::Periph<timer1::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for Timer3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer3").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::timer1 as timer3;
#[doc = "General-purpose-timers"]
pub type Timer4 = crate::Periph<timer1::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for Timer4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer4").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::timer1 as timer4;
#[doc = "Basic-timers"]
pub type Timer5 = crate::Periph<timer5::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for Timer5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer5").finish()
    }
}
#[doc = "Basic-timers"]
pub mod timer5;
#[doc = "Basic-timers"]
pub type Timer6 = crate::Periph<timer5::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for Timer6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer6").finish()
    }
}
#[doc = "Basic-timers"]
pub use self::timer5 as timer6;
#[doc = "Advanced-timers"]
pub type Timer7 = crate::Periph<timer0::RegisterBlock, 0x4001_0400>;
impl core::fmt::Debug for Timer7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer7").finish()
    }
}
#[doc = "Advanced-timers"]
pub use self::timer0 as timer7;
#[doc = "General-purpose-timers"]
pub type Timer8 = crate::Periph<timer8::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for Timer8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer8").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod timer8;
#[doc = "General-purpose-timers"]
pub type Timer9 = crate::Periph<timer9::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for Timer9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer9").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod timer9;
#[doc = "General-purpose-timers"]
pub type Timer10 = crate::Periph<timer9::RegisterBlock, 0x4001_4800>;
impl core::fmt::Debug for Timer10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer10").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::timer9 as timer10;
#[doc = "General-purpose-timers"]
pub type Timer11 = crate::Periph<timer8::RegisterBlock, 0x4000_1800>;
impl core::fmt::Debug for Timer11 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer11").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::timer8 as timer11;
#[doc = "General-purpose-timers"]
pub type Timer12 = crate::Periph<timer9::RegisterBlock, 0x4000_1c00>;
impl core::fmt::Debug for Timer12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer12").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::timer9 as timer12;
#[doc = "General-purpose-timers"]
pub type Timer13 = crate::Periph<timer9::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for Timer13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer13").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::timer9 as timer13;
#[doc = "TFT-LCD interface"]
pub type Tli = crate::Periph<tli::RegisterBlock, 0x4001_6800>;
impl core::fmt::Debug for Tli {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tli").finish()
    }
}
#[doc = "TFT-LCD interface"]
pub mod tli;
#[doc = "Ture random number generator"]
pub type Trng = crate::Periph<trng::RegisterBlock, 0x5006_0800>;
impl core::fmt::Debug for Trng {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Trng").finish()
    }
}
#[doc = "Ture random number generator"]
pub mod trng;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart0 = crate::Periph<usart0::RegisterBlock, 0x4001_1000>;
impl core::fmt::Debug for Usart0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart0").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart0;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart1 = crate::Periph<usart0::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for Usart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart0 as usart1;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart2 = crate::Periph<usart0::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for Usart2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart2").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart0 as usart2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart5 = crate::Periph<usart0::RegisterBlock, 0x4001_1400>;
impl core::fmt::Debug for Usart5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart5").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart0 as usart5;
#[doc = "Universal asynchronous receiver transmitter"]
pub type Uart3 = crate::Periph<uart3::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for Uart3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart3").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub mod uart3;
#[doc = "Universal asynchronous receiver transmitter"]
pub type Uart4 = crate::Periph<uart3::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for Uart4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart4").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub use self::uart3 as uart4;
#[doc = "Universal asynchronous receiver transmitter"]
pub type Uart6 = crate::Periph<uart3::RegisterBlock, 0x4000_7800>;
impl core::fmt::Debug for Uart6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart6").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub use self::uart3 as uart6;
#[doc = "Universal asynchronous receiver transmitter"]
pub type Uart7 = crate::Periph<uart3::RegisterBlock, 0x4000_7c00>;
impl core::fmt::Debug for Uart7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart7").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub use self::uart3 as uart7;
#[doc = "USB full speed global registers"]
pub type FsGlobal = crate::Periph<fs_global::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for FsGlobal {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FsGlobal").finish()
    }
}
#[doc = "USB full speed global registers"]
pub mod fs_global;
#[doc = "USB on the go full speed host"]
pub type FsHost = crate::Periph<fs_host::RegisterBlock, 0x5000_0400>;
impl core::fmt::Debug for FsHost {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FsHost").finish()
    }
}
#[doc = "USB on the go full speed host"]
pub mod fs_host;
#[doc = "USB on the go full speed device"]
pub type FsDevice = crate::Periph<fs_device::RegisterBlock, 0x5000_0800>;
impl core::fmt::Debug for FsDevice {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FsDevice").finish()
    }
}
#[doc = "USB on the go full speed device"]
pub mod fs_device;
#[doc = "USB on the go full speed"]
pub type FsPwrclk = crate::Periph<fs_pwrclk::RegisterBlock, 0x5000_0e00>;
impl core::fmt::Debug for FsPwrclk {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FsPwrclk").finish()
    }
}
#[doc = "USB on the go full speed"]
pub mod fs_pwrclk;
#[doc = "USB high speed global registers"]
pub type HsGlobal = crate::Periph<hs_global::RegisterBlock, 0x4004_0000>;
impl core::fmt::Debug for HsGlobal {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HsGlobal").finish()
    }
}
#[doc = "USB high speed global registers"]
pub mod hs_global;
#[doc = "USB on the go full speed host"]
pub type HsHost = crate::Periph<hs_host::RegisterBlock, 0x4004_0400>;
impl core::fmt::Debug for HsHost {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HsHost").finish()
    }
}
#[doc = "USB on the go full speed host"]
pub mod hs_host;
#[doc = "USB on the go high speed device"]
pub type HsDevice = crate::Periph<hs_device::RegisterBlock, 0x4004_0800>;
impl core::fmt::Debug for HsDevice {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HsDevice").finish()
    }
}
#[doc = "USB on the go high speed device"]
pub mod hs_device;
#[doc = "USB on the go high speed power and clock"]
pub type HsPwrclk = crate::Periph<hs_pwrclk::RegisterBlock, 0x4004_0e00>;
impl core::fmt::Debug for HsPwrclk {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HsPwrclk").finish()
    }
}
#[doc = "USB on the go high speed power and clock"]
pub mod hs_pwrclk;
#[doc = "Window watchdog timer"]
pub type Wwdgt = crate::Periph<wwdgt::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for Wwdgt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wwdgt").finish()
    }
}
#[doc = "Window watchdog timer"]
pub mod wwdgt;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "ADC0"]
    pub adc0: Adc0,
    #[doc = "ADC1"]
    pub adc1: Adc1,
    #[doc = "ADC2"]
    pub adc2: Adc2,
    #[doc = "ADC_Common"]
    pub adc_common: AdcCommon,
    #[doc = "CAN0"]
    pub can0: Can0,
    #[doc = "CAN1"]
    pub can1: Can1,
    #[doc = "CRC"]
    pub crc: Crc,
    #[doc = "CTC"]
    pub ctc: Ctc,
    #[doc = "DAC"]
    pub dac: Dac,
    #[doc = "DBG"]
    pub dbg: Dbg,
    #[doc = "DCI"]
    pub dci: Dci,
    #[doc = "DMA0"]
    pub dma0: Dma0,
    #[doc = "DMA1"]
    pub dma1: Dma1,
    #[doc = "ENET_DMA"]
    pub enet_dma: EnetDma,
    #[doc = "ENET_MAC_FCTH"]
    pub enet_mac_fcth: EnetMacFcth,
    #[doc = "ENET_MAC"]
    pub enet_mac: EnetMac,
    #[doc = "ENET_MSC"]
    pub enet_msc: EnetMsc,
    #[doc = "ENET_PTP"]
    pub enet_ptp: EnetPtp,
    #[doc = "EXMC"]
    pub exmc: Exmc,
    #[doc = "EXTI"]
    pub exti: Exti,
    #[doc = "FMC"]
    pub fmc: Fmc,
    #[doc = "FWDGT"]
    pub fwdgt: Fwdgt,
    #[doc = "GPIOA"]
    pub gpioa: Gpioa,
    #[doc = "GPIOB"]
    pub gpiob: Gpiob,
    #[doc = "GPIOC"]
    pub gpioc: Gpioc,
    #[doc = "GPIOD"]
    pub gpiod: Gpiod,
    #[doc = "GPIOE"]
    pub gpioe: Gpioe,
    #[doc = "GPIOF"]
    pub gpiof: Gpiof,
    #[doc = "GPIOG"]
    pub gpiog: Gpiog,
    #[doc = "GPIOH"]
    pub gpioh: Gpioh,
    #[doc = "GPIOI"]
    pub gpioi: Gpioi,
    #[doc = "I2C0"]
    pub i2c0: I2c0,
    #[doc = "I2C1"]
    pub i2c1: I2c1,
    #[doc = "I2C2"]
    pub i2c2: I2c2,
    #[doc = "IPA"]
    pub ipa: Ipa,
    #[doc = "IREF"]
    pub iref: Iref,
    #[doc = "PMU"]
    pub pmu: Pmu,
    #[doc = "RCU"]
    pub rcu: Rcu,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "SDIO"]
    pub sdio: Sdio,
    #[doc = "SPI0"]
    pub spi0: Spi0,
    #[doc = "SPI1"]
    pub spi1: Spi1,
    #[doc = "SPI2"]
    pub spi2: Spi2,
    #[doc = "SPI3"]
    pub spi3: Spi3,
    #[doc = "SPI4"]
    pub spi4: Spi4,
    #[doc = "SPI5"]
    pub spi5: Spi5,
    #[doc = "I2S1_add"]
    pub i2s1_add: I2s1Add,
    #[doc = "I2S2_add"]
    pub i2s2_add: I2s2Add,
    #[doc = "SYSCFG"]
    pub syscfg: Syscfg,
    #[doc = "TIMER0"]
    pub timer0: Timer0,
    #[doc = "TIMER1"]
    pub timer1: Timer1,
    #[doc = "TIMER2"]
    pub timer2: Timer2,
    #[doc = "TIMER3"]
    pub timer3: Timer3,
    #[doc = "TIMER4"]
    pub timer4: Timer4,
    #[doc = "TIMER5"]
    pub timer5: Timer5,
    #[doc = "TIMER6"]
    pub timer6: Timer6,
    #[doc = "TIMER7"]
    pub timer7: Timer7,
    #[doc = "TIMER8"]
    pub timer8: Timer8,
    #[doc = "TIMER9"]
    pub timer9: Timer9,
    #[doc = "TIMER10"]
    pub timer10: Timer10,
    #[doc = "TIMER11"]
    pub timer11: Timer11,
    #[doc = "TIMER12"]
    pub timer12: Timer12,
    #[doc = "TIMER13"]
    pub timer13: Timer13,
    #[doc = "TLI"]
    pub tli: Tli,
    #[doc = "TRNG"]
    pub trng: Trng,
    #[doc = "USART0"]
    pub usart0: Usart0,
    #[doc = "USART1"]
    pub usart1: Usart1,
    #[doc = "USART2"]
    pub usart2: Usart2,
    #[doc = "USART5"]
    pub usart5: Usart5,
    #[doc = "UART3"]
    pub uart3: Uart3,
    #[doc = "UART4"]
    pub uart4: Uart4,
    #[doc = "UART6"]
    pub uart6: Uart6,
    #[doc = "UART7"]
    pub uart7: Uart7,
    #[doc = "FS_GLOBAL"]
    pub fs_global: FsGlobal,
    #[doc = "FS_HOST"]
    pub fs_host: FsHost,
    #[doc = "FS_DEVICE"]
    pub fs_device: FsDevice,
    #[doc = "FS_PWRCLK"]
    pub fs_pwrclk: FsPwrclk,
    #[doc = "HS_GLOBAL"]
    pub hs_global: HsGlobal,
    #[doc = "HS_HOST"]
    pub hs_host: HsHost,
    #[doc = "HS_DEVICE"]
    pub hs_device: HsDevice,
    #[doc = "HS_PWRCLK"]
    pub hs_pwrclk: HsPwrclk,
    #[doc = "WWDGT"]
    pub wwdgt: Wwdgt,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            adc0: Adc0::steal(),
            adc1: Adc1::steal(),
            adc2: Adc2::steal(),
            adc_common: AdcCommon::steal(),
            can0: Can0::steal(),
            can1: Can1::steal(),
            crc: Crc::steal(),
            ctc: Ctc::steal(),
            dac: Dac::steal(),
            dbg: Dbg::steal(),
            dci: Dci::steal(),
            dma0: Dma0::steal(),
            dma1: Dma1::steal(),
            enet_dma: EnetDma::steal(),
            enet_mac_fcth: EnetMacFcth::steal(),
            enet_mac: EnetMac::steal(),
            enet_msc: EnetMsc::steal(),
            enet_ptp: EnetPtp::steal(),
            exmc: Exmc::steal(),
            exti: Exti::steal(),
            fmc: Fmc::steal(),
            fwdgt: Fwdgt::steal(),
            gpioa: Gpioa::steal(),
            gpiob: Gpiob::steal(),
            gpioc: Gpioc::steal(),
            gpiod: Gpiod::steal(),
            gpioe: Gpioe::steal(),
            gpiof: Gpiof::steal(),
            gpiog: Gpiog::steal(),
            gpioh: Gpioh::steal(),
            gpioi: Gpioi::steal(),
            i2c0: I2c0::steal(),
            i2c1: I2c1::steal(),
            i2c2: I2c2::steal(),
            ipa: Ipa::steal(),
            iref: Iref::steal(),
            pmu: Pmu::steal(),
            rcu: Rcu::steal(),
            rtc: Rtc::steal(),
            sdio: Sdio::steal(),
            spi0: Spi0::steal(),
            spi1: Spi1::steal(),
            spi2: Spi2::steal(),
            spi3: Spi3::steal(),
            spi4: Spi4::steal(),
            spi5: Spi5::steal(),
            i2s1_add: I2s1Add::steal(),
            i2s2_add: I2s2Add::steal(),
            syscfg: Syscfg::steal(),
            timer0: Timer0::steal(),
            timer1: Timer1::steal(),
            timer2: Timer2::steal(),
            timer3: Timer3::steal(),
            timer4: Timer4::steal(),
            timer5: Timer5::steal(),
            timer6: Timer6::steal(),
            timer7: Timer7::steal(),
            timer8: Timer8::steal(),
            timer9: Timer9::steal(),
            timer10: Timer10::steal(),
            timer11: Timer11::steal(),
            timer12: Timer12::steal(),
            timer13: Timer13::steal(),
            tli: Tli::steal(),
            trng: Trng::steal(),
            usart0: Usart0::steal(),
            usart1: Usart1::steal(),
            usart2: Usart2::steal(),
            usart5: Usart5::steal(),
            uart3: Uart3::steal(),
            uart4: Uart4::steal(),
            uart6: Uart6::steal(),
            uart7: Uart7::steal(),
            fs_global: FsGlobal::steal(),
            fs_host: FsHost::steal(),
            fs_device: FsDevice::steal(),
            fs_pwrclk: FsPwrclk::steal(),
            hs_global: HsGlobal::steal(),
            hs_host: HsHost::steal(),
            hs_device: HsDevice::steal(),
            hs_pwrclk: HsPwrclk::steal(),
            wwdgt: Wwdgt::steal(),
        }
    }
}
